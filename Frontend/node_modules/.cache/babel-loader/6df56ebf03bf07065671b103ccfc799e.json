{"ast":null,"code":"var _jsxFileName = \"/home/vrushali/Desktop/BlockchainFinal/metamaskinstalled/Frontend/src/TakeRegisterPhoto.js\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport renderHTML from 'react-render-html';\nimport { Link, Redirect } from 'react-router-dom';\nimport RegisterStorage from \"./stores/RegisterStorage\";\nimport swal from \"sweetalert2\";\nimport './Register.css';\nimport './takephoto.css';\nimport web3 from './web3';\nimport VoterContract from './VoterContract';\n\nvar CryptoJS = require(\"crypto-js\");\n\nclass TakeRegisterPhoto extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: this.props.location.state.password,\n      username: this.props.location.state.username,\n      fname: this.props.location.state.fname,\n      lname: this.props.location.state.lname,\n      dob: this.props.location.state.dob,\n      gender: this.props.location.state.gender,\n      email: this.props.location.state.email,\n      metaaddress: '',\n      privateKey: '',\n      publicKey: ''\n    };\n    this.captureImage = this.captureImage.bind(this);\n  }\n\n  async captureImage() {\n    if (!this.state.username) return;\n\n    try {\n      console.log('in capture image ');\n      var data = {};\n      data.username = this.state.username;\n      const response = await axios.post('http://localhost:5000/api/register', data);\n      console.log(\" response.data\" + response);\n      console.log(\" response.data\" + JSON.stringify(response.data));\n      let result = response.data.success;\n\n      if (result) {\n        console.log(\"image upload success\");\n        swal.fire({\n          icon: 'success',\n          title: 'Congrats!! Image Taken!',\n          text: 'You have succesfully uploaded your image!',\n          confirmButtonText: \"OK\"\n        }); //create metamask account\n\n        console.log(\"creating an account..\");\n        var responsemeta = await web3.eth.accounts.create(web3.utils.randomHex(32));\n        console.log(\"responsemeta: \" + responsemeta);\n        this.state.metaaddress = responsemeta.address;\n        console.log(this.state.metaaddress);\n        this.state.privateKey = responsemeta.privateKey;\n        console.log(this.state.privateKey);\n        swal.mixin({\n          confirmButtonText: 'Next &rarr;',\n          showCancelButton: true,\n          progressSteps: ['1', '2']\n        }).queue([{\n          title: 'Step 1',\n          text: 'Kindly safely save the private key displayed in next step. It is required for login.'\n        }, {\n          title: 'Step 2',\n          text: this.state.privateKey\n        }]).then(result => {\n          if (result.value) {\n            const answers = JSON.stringify(result.value);\n            swal.fire({\n              title: 'All done!',\n              confirmButtonText: 'Lovely!'\n            });\n          }\n        }); //store information in DB\n\n        try {\n          let res = await fetch('http://localhost:3003/voterinfopost', {\n            method: 'post',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              password: this.state.password,\n              username: this.state.username,\n              metamaskaddrss: this.state.metaaddress\n            })\n          });\n          let result = await res.json();\n          console.log(\"response from db: \", result);\n\n          if (result.msg == \"Username already taken\") {\n            swal.fire({\n              icon: 'error',\n              title: 'Username is taken',\n              text: 'Try Again',\n              confirmButtonText: \"OK\"\n            });\n            this.props.history.push(\"/RegisterInfo\");\n          }\n\n          if (result && result.success) {\n            //send information to blockchain\n            console.log(\"Voterid is : \" + result.voterid); //creating fake file\n\n            var featureVector = \"[-0.026053009727038442, 0.15075167000293732, 0.056840124129084874, 0.13072286173701286, 0.031368514124769716, 0.17485265031456948, 0.026036462942138315, -0.15000932678580284, 0.026525200966279954, 0.041824865166563543, 0.023493123591179027, 0.016195070333778858, -0.03132371820800472, -0.11433402203023434, 0.05289670690894127, 0.03668313853442669, -0.009506147522479295, 0.1222660407423973, -0.04868937355233356, -0.04474613660946489, 0.052147776954807344, -0.05275954557582736, -0.02444938982487656, 0.096379489954561, 0.10348723955452442, -0.06408110213465988, -0.1373983906209469, -0.10776561334729194, 0.02894978958182037, 0.0766159513220191, 0.15818112686276437, 0.2281595580279827, -0.05162701521068811, 0.0930608456581831, 0.0970461630821228, 0.0657275614142418, 0.018382330257445574, -0.029534526634961367, 0.04452831541653723, -0.09417276695370674, 0.07738524563610553, -0.12633040219545363, 0.04994632537476718, -0.06905871148221195, 0.019391544435638935, -0.043886448480770925, 0.0927432955801487, 0.021635680759791286, -0.14338846191763877, -0.08279495883733035, 0.07110752122942358, 0.006719377518165857, 0.06898875164799392, -0.09634707495570183, 0.027052232841961087, 0.1137135761976242, -0.06861873772693798, 0.04335911061090883, -0.030104315523058176, -0.03220944156113546, -0.11181822314858436, 0.024334094151854516, 0.05972563771065324, -0.24802100479602815, 0.1731882743537426, 0.11389585822820664, 0.0026230946759460494, -0.09616105115041136, -0.237820887863636, 0.18267094433307648, -0.07186868447810411, 0.05846655703149736, -0.10829842559993268, 0.02567508081032429, -0.02074729474097694, -0.05343594083562493, 0.05554653663188219, 0.019599515942391007, -0.04109618331771344, -0.032753658844158054, -0.07138129595667124, 0.07980808287858963, -0.04745268542319536, -0.062110643214546145, -0.0487545807112474, -0.04590106926392764, -0.031276981900446116, -0.05975009130313993, -0.059101097586099056, 0.12414395444095135, 0.07365519478917122, -0.05549014636315405, -0.008778482545167207, 0.01807546407682821, 0.029356441106647254, 0.09675576031208039, -0.005981170198647305, 0.03289733230601996, 0.03297194209881127, 0.043707616459578276, 0.04224407441914082, -0.02428804671857506, -0.11145847991108894, 0.05473561081569642, 0.053805233801249415, 0.07129376471042632, 0.04562839126447216, -0.04254542816895992, 0.028919321247376503, 0.015321260574855841, -0.11880014650523663, 0.0669758278504014, -0.024308743935544042, -0.0718711955845356, 0.1488288350403309, -0.07876925777643919, -0.04420450812438503, -0.032954031429253516, 0.11168285958468914, 0.12905490383505822, 0.14653940960764886, -0.030435446085466538, 0.033497215113602576, 0.03103744749794714, 0.058833220303058625, 0.09757829710841179, 0.09236186929047108, -0.08559191657230258]\";\n            var voterinfo = {\n              fv: featureVector,\n              password: this.state.password,\n              username: this.state.username,\n              fname: this.props.location.state.fname,\n              lname: this.props.location.state.lname,\n              dob: this.props.location.state.dob,\n              gender: this.props.location.state.gender,\n              id: result.msg\n            };\n            console.log(\"Type of private key var in register: \" + typeof this.state.privateKey);\n            var voterinfocipher = CryptoJS.AES.encrypt(JSON.stringify(voterinfo), this.state.privateKey);\n            console.log(\"Encrypted info: \", voterinfocipher.toString()); //store ciphertext on blockchain\n\n            var accounts = await web3.eth.getAccounts();\n            console.log(\"web3\", accounts);\n            console.log(\"aing: \" + accounts[0]);\n            web3.eth.defaultAccount = accounts[0];\n            await VoterContract.methods.register(result.voterid, voterinfocipher.toString()).send({\n              from: accounts[0]\n            });\n            swal.fire({\n              icon: 'success',\n              title: 'Congratulations!',\n              text: 'Voter information stored on blockchain',\n              confirmButtonText: \"OK\"\n            });\n            this.props.history.push(\"/Login\");\n          } else if (result && result.success === false) {\n            console.log(\"registration failed \");\n            swal.fire({\n              icon: 'error',\n              title: 'Failed to store registration data in database',\n              text: 'Try Again',\n              confirmButtonText: \"OK\"\n            });\n            this.props.history.push(\"/RegisterInfo\");\n          }\n        } catch (e) {}\n      } else {\n        console.log(\"image upload failed\");\n      }\n    } catch (e) {}\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \" brand\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Electronic\")), React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"colorb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Ballot\")), React.createElement(Link, {\n      to: \"/AdminLogin\",\n      className: \"nav-item nav-link admin\",\n      id: \"log\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \" Setup-Campaign\"), React.createElement(Link, {\n      to: \"/RegisterInfo\",\n      className: \"nav-item nav-link reg\",\n      id: \"log\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \" Register\"), React.createElement(Link, {\n      to: \"/Login\",\n      className: \"nav-item nav-link log\",\n      id: \"log\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \" Login\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"pitchline\",\n      id: \"pitch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"Main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Online election perfection!\"), React.createElement(\"div\", {\n      id: \"about\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Our E-Voting solution is here for you.\"))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"information\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"registerimagever col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"qoutetakephoto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"h3\",\n      className: \"since-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \" Helping People Connect\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), \"Since 2020\", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Security & Trust\")))), React.createElement(\"div\", {\n      className: \"canvasphoto\",\n      id: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"phototext\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Photo:\"), React.createElement(\"video\", {\n      className: \"videoclass\",\n      id: \"videoForImage\",\n      autoPlay: true,\n      width: \"250px\",\n      height: \"200px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn\",\n      id: \"capture\",\n      onClick: this.captureImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Capture\"))));\n  }\n\n} //Export The Main Component\n\n\nexport default TakeRegisterPhoto;","map":{"version":3,"sources":["/home/vrushali/Desktop/BlockchainFinal/metamaskinstalled/Frontend/src/TakeRegisterPhoto.js"],"names":["React","Component","axios","renderHTML","Link","Redirect","RegisterStorage","swal","web3","VoterContract","CryptoJS","require","TakeRegisterPhoto","constructor","props","state","password","location","username","fname","lname","dob","gender","email","metaaddress","privateKey","publicKey","captureImage","bind","console","log","data","response","post","JSON","stringify","result","success","fire","icon","title","text","confirmButtonText","responsemeta","eth","accounts","create","utils","randomHex","address","mixin","showCancelButton","progressSteps","queue","then","value","answers","res","fetch","method","headers","body","metamaskaddrss","json","msg","history","push","voterid","featureVector","voterinfo","fv","id","voterinfocipher","AES","encrypt","toString","getAccounts","defaultAccount","methods","register","send","from","e","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,kBAA/B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,gBAAP;AACA,OAAO,iBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,MAAMC,iBAAN,SAAgCX,SAAhC,CAA0C;AACtCY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BC,QAD3B;AAETE,MAAAA,QAAQ,EAAC,KAAKJ,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BG,QAF1B;AAGTC,MAAAA,KAAK,EAAE,KAAKL,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BI,KAHxB;AAITC,MAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BK,KAJxB;AAKTC,MAAAA,GAAG,EAAE,KAAKP,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BM,GALtB;AAMTC,MAAAA,MAAM,EAAE,KAAKR,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BO,MANzB;AAOTC,MAAAA,KAAK,EAAE,KAAKT,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BQ,KAPxB;AAQTC,MAAAA,WAAW,EAAE,EARJ;AASTC,MAAAA,UAAU,EAAE,EATH;AAUTC,MAAAA,SAAS,EAAE;AAVF,KAAb;AAYA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAED,QAAMD,YAAN,GAAqB;AACjB,QAAI,CAAC,KAAKZ,KAAL,CAAWG,QAAhB,EACA;;AAEA,QAAG;AACKW,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,UAAIC,IAAI,GAAG,EAAX;AACAA,MAAAA,IAAI,CAACb,QAAL,GAAe,KAAKH,KAAL,CAAWG,QAA1B;AAEA,YAAMc,QAAQ,GAAG,MAAM9B,KAAK,CAAC+B,IAAN,CAAW,oCAAX,EAAgDF,IAAhD,CAAvB;AAEAF,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBE,QAA/B;AAEAH,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBI,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACD,IAAxB,CAA/B;AAEA,UAAIK,MAAM,GAAGJ,QAAQ,CAACD,IAAT,CAAcM,OAA3B;;AAEI,UAAID,MAAJ,EACA;AACIP,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAvB,QAAAA,IAAI,CAAC+B,IAAL,CAAU;AACNC,UAAAA,IAAI,EAAE,SADA;AAENC,UAAAA,KAAK,EAAE,yBAFD;AAGNC,UAAAA,IAAI,EAAE,2CAHA;AAINC,UAAAA,iBAAiB,EAAE;AAJb,SAAV,EAFJ,CASI;;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,YAAIa,YAAY,GAAG,MAAMnC,IAAI,CAACoC,GAAL,CAASC,QAAT,CAAkBC,MAAlB,CAAyBtC,IAAI,CAACuC,KAAL,CAAWC,SAAX,CAAqB,EAArB,CAAzB,CAAzB;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAiBa,YAA7B;AACA,aAAK5B,KAAL,CAAWS,WAAX,GAAyBmB,YAAY,CAACM,OAAtC;AACApB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAL,CAAWS,WAAvB;AACA,aAAKT,KAAL,CAAWU,UAAX,GAAwBkB,YAAY,CAAClB,UAArC;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAL,CAAWU,UAAvB;AAGAlB,QAAAA,IAAI,CAAC2C,KAAL,CAAW;AACPR,UAAAA,iBAAiB,EAAE,aADZ;AAEPS,UAAAA,gBAAgB,EAAE,IAFX;AAGPC,UAAAA,aAAa,EAAE,CAAC,GAAD,EAAM,GAAN;AAHR,SAAX,EAIGC,KAJH,CAIS,CACL;AACIb,UAAAA,KAAK,EAAE,QADX;AAEIC,UAAAA,IAAI,EAAE;AAFV,SADK,EAKL;AACID,UAAAA,KAAK,EAAE,QADX;AAEIC,UAAAA,IAAI,EAAE,KAAK1B,KAAL,CAAWU;AAFrB,SALK,CAJT,EAaG6B,IAbH,CAaSlB,MAAD,IAAY;AAChB,cAAIA,MAAM,CAACmB,KAAX,EAAkB;AAClB,kBAAMC,OAAO,GAAGtB,IAAI,CAACC,SAAL,CAAeC,MAAM,CAACmB,KAAtB,CAAhB;AACAhD,YAAAA,IAAI,CAAC+B,IAAL,CAAU;AACNE,cAAAA,KAAK,EAAE,WADD;AAENE,cAAAA,iBAAiB,EAAE;AAFb,aAAV;AAIC;AACJ,SArBD,EAnBJ,CA0CI;;AACA,YAAI;AACA,cAAIe,GAAG,GAAG,MAAMC,KAAK,CAAC,qCAAD,EAAwC;AACzDC,YAAAA,MAAM,EAAE,MADiD;AAEzDC,YAAAA,OAAO,EAAE;AACL,wBAAU,kBADL;AAEL,8BAAgB;AAFX,aAFgD;AAMzDC,YAAAA,IAAI,EAAE3B,IAAI,CAACC,SAAL,CAAe;AACjBnB,cAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QADJ;AAEjBE,cAAAA,QAAQ,EAAC,KAAKH,KAAL,CAAWG,QAFH;AAGjB4C,cAAAA,cAAc,EAAE,KAAK/C,KAAL,CAAWS;AAHV,aAAf;AANmD,WAAxC,CAArB;AAaA,cAAIY,MAAM,GAAG,MAAMqB,GAAG,CAACM,IAAJ,EAAnB;AACAlC,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCM,MAAlC;;AAEA,cAAGA,MAAM,CAAC4B,GAAP,IAAc,wBAAjB,EACA;AACIzD,YAAAA,IAAI,CAAC+B,IAAL,CAAU;AACNC,cAAAA,IAAI,EAAE,OADA;AAENC,cAAAA,KAAK,EAAE,mBAFD;AAGNC,cAAAA,IAAI,EAAE,WAHA;AAINC,cAAAA,iBAAiB,EAAE;AAJb,aAAV;AAMA,iBAAK5B,KAAL,CAAWmD,OAAX,CAAmBC,IAAnB,CAAwB,eAAxB;AACH;;AAED,cAAI9B,MAAM,IAAIA,MAAM,CAACC,OAArB,EAA8B;AAC1B;AACAR,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAgBM,MAAM,CAAC+B,OAAnC,EAF0B,CAG1B;;AACA,gBAAIC,aAAa,GAAG,8sFAApB;AACA,gBAAIC,SAAS,GAAG;AACRC,cAAAA,EAAE,EAAEF,aADI;AAERpD,cAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAFb;AAGRE,cAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QAHb;AAIRC,cAAAA,KAAK,EAAE,KAAKL,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BI,KAJzB;AAKRC,cAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BK,KALzB;AAMRC,cAAAA,GAAG,EAAE,KAAKP,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BM,GANvB;AAORC,cAAAA,MAAM,EAAE,KAAKR,KAAL,CAAWG,QAAX,CAAoBF,KAApB,CAA0BO,MAP1B;AAQRiD,cAAAA,EAAE,EAAEnC,MAAM,CAAC4B;AARH,aAAhB;AAWAnC,YAAAA,OAAO,CAACC,GAAR,CAAY,0CAAyC,OAAO,KAAKf,KAAL,CAAWU,UAAvE;AACA,gBAAI+C,eAAe,GAAG9D,QAAQ,CAAC+D,GAAT,CAAaC,OAAb,CAAqBxC,IAAI,CAACC,SAAL,CAAekC,SAAf,CAArB,EAAgD,KAAKtD,KAAL,CAAWU,UAA3D,CAAtB;AACAI,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC0C,eAAe,CAACG,QAAhB,EAAhC,EAlB0B,CAqB1B;;AACA,gBAAI9B,QAAQ,GAAG,MAAMrC,IAAI,CAACoC,GAAL,CAASgC,WAAT,EAArB;AACA/C,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBe,QAApB;AACAhB,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAUe,QAAQ,CAAC,CAAD,CAA9B;AACArC,YAAAA,IAAI,CAACoC,GAAL,CAASiC,cAAT,GAA0BhC,QAAQ,CAAC,CAAD,CAAlC;AAEA,kBAAMpC,aAAa,CAACqE,OAAd,CAAsBC,QAAtB,CAA+B3C,MAAM,CAAC+B,OAAtC,EAA+CK,eAAe,CAACG,QAAhB,EAA/C,EAA2EK,IAA3E,CAAgF;AAACC,cAAAA,IAAI,EAAEpC,QAAQ,CAAC,CAAD;AAAf,aAAhF,CAAN;AAEAtC,YAAAA,IAAI,CAAC+B,IAAL,CAAU;AACNC,cAAAA,IAAI,EAAE,SADA;AAENC,cAAAA,KAAK,EAAE,kBAFD;AAGNC,cAAAA,IAAI,EAAE,wCAHA;AAINC,cAAAA,iBAAiB,EAAE;AAJb,aAAV;AAOA,iBAAK5B,KAAL,CAAWmD,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH,WArCD,MAuCK,IAAI9B,MAAM,IAAIA,MAAM,CAACC,OAAP,KAAmB,KAAjC,EAAwC;AACzCR,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAvB,YAAAA,IAAI,CAAC+B,IAAL,CAAU;AACNC,cAAAA,IAAI,EAAE,OADA;AAENC,cAAAA,KAAK,EAAE,+CAFD;AAGNC,cAAAA,IAAI,EAAE,WAHA;AAINC,cAAAA,iBAAiB,EAAE;AAJb,aAAV;AAMA,iBAAK5B,KAAL,CAAWmD,OAAX,CAAmBC,IAAnB,CAAwB,eAAxB;AACH;AACJ,SA7ED,CA8EA,OAAOgB,CAAP,EAAU,CAET;AACJ,OA7HD,MA8HI;AACArD,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH;AAEZ,KA/ID,CA+IC,OAAMoD,CAAN,EAAQ,CAER;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAEL;AAAK,MAAA,SAAS,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACO;AAAK,MAAA,SAAS,EAAE,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,EAII;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CAJJ,EAOI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,aAAT;AAAuB,MAAA,SAAS,EAAC,yBAAjC;AAA2D,MAAA,EAAE,EAAC,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAPJ,EASI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,eAAT;AAAyB,MAAA,SAAS,EAAC,uBAAnC;AAA2D,MAAA,EAAE,EAAC,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATJ,EAWI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,QAAT;AAAkB,MAAA,SAAS,EAAC,uBAA5B;AAAoD,MAAA,EAAE,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ,CADP,EAgBG;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,EAAE,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,EAEI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAFJ,CADJ,CAhBH,EAuBG;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQ;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAqB,MAAA,SAAS,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,gBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFJ,CADJ,CAFJ,CADR,EAUQ;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,EAAE,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,EAEQ;AAAO,MAAA,SAAS,EAAC,YAAjB;AAA8B,MAAA,EAAE,EAAC,eAAjC;AAAiD,MAAA,QAAQ,MAAzD;AAA0D,MAAA,KAAK,EAAC,OAAhE;AAAwE,MAAA,MAAM,EAAC,OAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR,EAGQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHR,EAIQ;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAwB,MAAA,EAAE,EAAC,SAA3B;AAAqC,MAAA,OAAO,EAAE,KAAKxD,YAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJR,CAVR,CAvBH,CAFK;AA4CD;;AAvNqC,C,CAyNxC;;;AACA,eAAef,iBAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\nimport renderHTML from 'react-render-html';\nimport { Link, Redirect } from 'react-router-dom';\nimport RegisterStorage from \"./stores/RegisterStorage\";\nimport swal from \"sweetalert2\";\nimport './Register.css';\nimport './takephoto.css';\nimport web3 from './web3';\nimport VoterContract from './VoterContract';\nvar CryptoJS = require(\"crypto-js\");\n\nclass TakeRegisterPhoto extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            password: this.props.location.state.password,\n            username:this.props.location.state.username,\n            fname: this.props.location.state.fname,\n            lname: this.props.location.state.lname,\n            dob: this.props.location.state.dob,\n            gender: this.props.location.state.gender,\n            email: this.props.location.state.email,\n            metaaddress: '',\n            privateKey: '',\n            publicKey: ''\n        }\n        this.captureImage = this.captureImage.bind(this)\n    }\n\n    async captureImage() {\n        if (!this.state.username)\n        return;\n\n        try{\n                console.log('in capture image ')\n                var data = {}\n                data.username= this.state.username\n\n                const response = await axios.post('http://localhost:5000/api/register',data)\n            \n                console.log(\" response.data\" + response)\n\n                console.log(\" response.data\" + JSON.stringify(response.data))\n            \n                let result = response.data.success;\n                \n                    if (result) \n                    {\n                        console.log(\"image upload success\");\n                        swal.fire({\n                            icon: 'success',\n                            title: 'Congrats!! Image Taken!',\n                            text: 'You have succesfully uploaded your image!',\n                            confirmButtonText: \"OK\"\n                        });\n\n                        //create metamask account\n                        console.log(\"creating an account..\");\n                        var responsemeta = await web3.eth.accounts.create(web3.utils.randomHex(32));\n                        console.log(\"responsemeta: \"+responsemeta);\n                        this.state.metaaddress = responsemeta.address;\n                        console.log(this.state.metaaddress);\n                        this.state.privateKey = responsemeta.privateKey;\n                        console.log(this.state.privateKey);\n                        \n\n                        swal.mixin({\n                            confirmButtonText: 'Next &rarr;',\n                            showCancelButton: true,\n                            progressSteps: ['1', '2']\n                        }).queue([\n                            {\n                                title: 'Step 1',\n                                text: 'Kindly safely save the private key displayed in next step. It is required for login.'\n                            },\n                            {\n                                title: 'Step 2',\n                                text: this.state.privateKey\n                            }\n                        ]).then((result) => {\n                            if (result.value) {\n                            const answers = JSON.stringify(result.value)\n                            swal.fire({\n                                title: 'All done!',\n                                confirmButtonText: 'Lovely!'\n                            })\n                            }\n                        })\n\n                        //store information in DB\n                        try {\n                            let res = await fetch('http://localhost:3003/voterinfopost', {\n                                method: 'post',\n                                headers: {\n                                    'Accept': 'application/json',\n                                    'Content-Type': 'application/json'\n                                },\n                                body: JSON.stringify({\n                                    password: this.state.password,\n                                    username:this.state.username,\n                                    metamaskaddrss: this.state.metaaddress\n                                })\n                            });\n                            \n                            let result = await res.json();\n                            console.log(\"response from db: \", result);\n\n                            if(result.msg == \"Username already taken\")\n                            {\n                                swal.fire({\n                                    icon: 'error',\n                                    title: 'Username is taken',\n                                    text: 'Try Again',\n                                    confirmButtonText: \"OK\"\n                                });\n                                this.props.history.push(\"/RegisterInfo\");\n                            }\n\n                            if (result && result.success) {\n                                //send information to blockchain\n                                console.log(\"Voterid is : \"+result.voterid);\n                                //creating fake file\n                                var featureVector = \"[-0.026053009727038442, 0.15075167000293732, 0.056840124129084874, 0.13072286173701286, 0.031368514124769716, 0.17485265031456948, 0.026036462942138315, -0.15000932678580284, 0.026525200966279954, 0.041824865166563543, 0.023493123591179027, 0.016195070333778858, -0.03132371820800472, -0.11433402203023434, 0.05289670690894127, 0.03668313853442669, -0.009506147522479295, 0.1222660407423973, -0.04868937355233356, -0.04474613660946489, 0.052147776954807344, -0.05275954557582736, -0.02444938982487656, 0.096379489954561, 0.10348723955452442, -0.06408110213465988, -0.1373983906209469, -0.10776561334729194, 0.02894978958182037, 0.0766159513220191, 0.15818112686276437, 0.2281595580279827, -0.05162701521068811, 0.0930608456581831, 0.0970461630821228, 0.0657275614142418, 0.018382330257445574, -0.029534526634961367, 0.04452831541653723, -0.09417276695370674, 0.07738524563610553, -0.12633040219545363, 0.04994632537476718, -0.06905871148221195, 0.019391544435638935, -0.043886448480770925, 0.0927432955801487, 0.021635680759791286, -0.14338846191763877, -0.08279495883733035, 0.07110752122942358, 0.006719377518165857, 0.06898875164799392, -0.09634707495570183, 0.027052232841961087, 0.1137135761976242, -0.06861873772693798, 0.04335911061090883, -0.030104315523058176, -0.03220944156113546, -0.11181822314858436, 0.024334094151854516, 0.05972563771065324, -0.24802100479602815, 0.1731882743537426, 0.11389585822820664, 0.0026230946759460494, -0.09616105115041136, -0.237820887863636, 0.18267094433307648, -0.07186868447810411, 0.05846655703149736, -0.10829842559993268, 0.02567508081032429, -0.02074729474097694, -0.05343594083562493, 0.05554653663188219, 0.019599515942391007, -0.04109618331771344, -0.032753658844158054, -0.07138129595667124, 0.07980808287858963, -0.04745268542319536, -0.062110643214546145, -0.0487545807112474, -0.04590106926392764, -0.031276981900446116, -0.05975009130313993, -0.059101097586099056, 0.12414395444095135, 0.07365519478917122, -0.05549014636315405, -0.008778482545167207, 0.01807546407682821, 0.029356441106647254, 0.09675576031208039, -0.005981170198647305, 0.03289733230601996, 0.03297194209881127, 0.043707616459578276, 0.04224407441914082, -0.02428804671857506, -0.11145847991108894, 0.05473561081569642, 0.053805233801249415, 0.07129376471042632, 0.04562839126447216, -0.04254542816895992, 0.028919321247376503, 0.015321260574855841, -0.11880014650523663, 0.0669758278504014, -0.024308743935544042, -0.0718711955845356, 0.1488288350403309, -0.07876925777643919, -0.04420450812438503, -0.032954031429253516, 0.11168285958468914, 0.12905490383505822, 0.14653940960764886, -0.030435446085466538, 0.033497215113602576, 0.03103744749794714, 0.058833220303058625, 0.09757829710841179, 0.09236186929047108, -0.08559191657230258]\";\n                                var voterinfo = {\n                                        fv: featureVector,\n                                        password: this.state.password,\n                                        username: this.state.username,\n                                        fname: this.props.location.state.fname,\n                                        lname: this.props.location.state.lname,\n                                        dob: this.props.location.state.dob,\n                                        gender: this.props.location.state.gender,\n                                        id: result.msg\n                                }\n\n                                console.log(\"Type of private key var in register: \"+ typeof(this.state.privateKey));\n                                var voterinfocipher = CryptoJS.AES.encrypt(JSON.stringify(voterinfo), this.state.privateKey);\n                                console.log(\"Encrypted info: \", voterinfocipher.toString());\n\n                                \n                                //store ciphertext on blockchain\n                                var accounts = await web3.eth.getAccounts();\n                                console.log(\"web3\", accounts);\n                                console.log(\"aing: \"+ accounts[0]);\n                                web3.eth.defaultAccount = accounts[0];\n                                \n                                await VoterContract.methods.register(result.voterid, voterinfocipher.toString()).send({from: accounts[0]});\n                                \n                                swal.fire({\n                                    icon: 'success',\n                                    title: 'Congratulations!',\n                                    text: 'Voter information stored on blockchain',\n                                    confirmButtonText: \"OK\"\n                                });\n                                \n                                this.props.history.push(\"/Login\");\n                            }\n                \n                            else if (result && result.success === false) {\n                                console.log(\"registration failed \")\n                                swal.fire({\n                                    icon: 'error',\n                                    title: 'Failed to store registration data in database',\n                                    text: 'Try Again',\n                                    confirmButtonText: \"OK\"\n                                });\n                                this.props.history.push(\"/RegisterInfo\");\n                            }\n                        }\n                        catch (e) {\n                \n                        }\n                    }\n                    else{\n                        console.log(\"image upload failed\");\n                    }\n                \n        }catch(e){\n\n        }\n    }\n\n    render() {\n      return (\n       \n <div className =\"container\">\n        <div className= \"header\">\n            <li className=\"nav-item\">\n                <a className=\" brand\">Electronic</a>\n            </li>\n            <li className=\"nav-item\">\n                <a className=\"colorb\">Ballot</a>\n            </li>\n            <Link to=\"/AdminLogin\" className=\"nav-item nav-link admin\" id=\"log\"> Setup-Campaign\n            </Link>\n            <Link to=\"/RegisterInfo\" className=\"nav-item nav-link reg\" id=\"log\"> Register\n            </Link>\n            <Link to=\"/Login\" className=\"nav-item nav-link log\" id=\"log\"> Login\n            </Link>\n        </div>\n\n    <div className=\"row\">\n        <div className=\"pitchline\" id=\"pitch\">\n            <div id=\"Main\">Online election perfection!</div>\n            <div id=\"about\">Our E-Voting solution is here for you.</div>\n        </div>\n    </div>  \n\n    <div className=\"row\">\n            <div className=\"information\" >\n                <div className=\"registerimagever col-md-6\"></div>\n                <div className=\"qoutetakephoto\">\n                    <div className =\"h3\" className=\"since-title\"> Helping People Connect\n                        <br></br>Since 2020\n                        <p>Security & Trust</p>\n                    </div>\n            </div>\n            </div>\n            <div className=\"canvasphoto\" id=\"canvas\" >\n            <div className=\"phototext\">Photo:</div>\n                    <video className=\"videoclass\" id=\"videoForImage\" autoPlay width=\"250px\" height=\"200px\"></video>\n                    <div></div>\n                    <button className=\"btn\" id=\"capture\" onClick={this.captureImage}>Capture</button>\n            </div>\n    </div>\n    </div>   \n      );\n    }\n  }\n  //Export The Main Component\n  export default TakeRegisterPhoto;\n  "]},"metadata":{},"sourceType":"module"}