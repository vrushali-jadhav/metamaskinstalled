{"ast":null,"code":"/**\n * Node.js wrapper for \"notify-send\".\n */\nvar os = require('os');\n\nvar which = require('which');\n\nvar utils = require('../lib/utils');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar notifier = 'notify-send';\nvar hasNotifier;\nmodule.exports = NotifySend;\n\nfunction NotifySend(options) {\n  options = utils.clone(options || {});\n\n  if (!(this instanceof NotifySend)) {\n    return new NotifySend(options);\n  }\n\n  this.options = options;\n  EventEmitter.call(this);\n}\n\nutil.inherits(NotifySend, EventEmitter);\n\nfunction noop() {}\n\nNotifySend.prototype.notify = function (options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof callback !== 'function') {\n    throw new TypeError('The second argument must be a function callback. You have passed ' + typeof callback);\n  }\n\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  if (os.type() !== 'Linux' && !os.type().match(/BSD$/)) {\n    callback(new Error('Only supported on Linux and *BSD systems'));\n    return this;\n  }\n\n  if (hasNotifier === false) {\n    callback(new Error('notify-send must be installed on the system.'));\n    return this;\n  }\n\n  if (hasNotifier || !!this.options.suppressOsdCheck) {\n    doNotification(options, callback);\n    return this;\n  }\n\n  try {\n    hasNotifier = !!which.sync(notifier);\n    doNotification(options, callback);\n  } catch (err) {\n    hasNotifier = false;\n    return callback(err);\n  }\n\n  return this;\n};\n\nvar allowedArguments = ['urgency', 'expire-time', 'icon', 'category', 'hint'];\n\nfunction doNotification(options, callback) {\n  var initial, argsList;\n  options = utils.mapToNotifySend(options);\n  options.title = options.title || 'Node Notification:';\n  initial = [options.title, options.message];\n  delete options.title;\n  delete options.message;\n  argsList = utils.constructArgumentList(options, {\n    initial: initial,\n    keyExtra: '-',\n    allowedArguments: allowedArguments\n  });\n  utils.command(notifier, argsList, callback);\n}","map":{"version":3,"sources":["/Users/vrushalij/Desktop/Blockchain/HarshUpdated/evoting-react-auth/Frontend/node_modules/node-notifier/notifiers/notifysend.js"],"names":["os","require","which","utils","EventEmitter","util","notifier","hasNotifier","module","exports","NotifySend","options","clone","call","inherits","noop","prototype","notify","callback","TypeError","title","message","Error","type","match","suppressOsdCheck","doNotification","sync","err","allowedArguments","initial","argsList","mapToNotifySend","constructArgumentList","keyExtra","command"],"mappings":"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","sourcesContent":["/**\n * Node.js wrapper for \"notify-send\".\n */\nvar os = require('os');\nvar which = require('which');\nvar utils = require('../lib/utils');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar notifier = 'notify-send';\nvar hasNotifier;\n\nmodule.exports = NotifySend;\n\nfunction NotifySend(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof NotifySend)) {\n    return new NotifySend(options);\n  }\n\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(NotifySend, EventEmitter);\n\nfunction noop() {}\nNotifySend.prototype.notify = function(options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n\n  if (typeof callback !== 'function') {\n    throw new TypeError(\n      'The second argument must be a function callback. You have passed ' +\n        typeof callback\n    );\n  }\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  if (os.type() !== 'Linux' && !os.type().match(/BSD$/)) {\n    callback(new Error('Only supported on Linux and *BSD systems'));\n    return this;\n  }\n\n  if (hasNotifier === false) {\n    callback(new Error('notify-send must be installed on the system.'));\n    return this;\n  }\n\n  if (hasNotifier || !!this.options.suppressOsdCheck) {\n    doNotification(options, callback);\n    return this;\n  }\n\n  try {\n    hasNotifier = !!which.sync(notifier);\n    doNotification(options, callback);\n  } catch (err) {\n    hasNotifier = false;\n    return callback(err);\n  }\n\n  return this;\n};\n\nvar allowedArguments = ['urgency', 'expire-time', 'icon', 'category', 'hint'];\n\nfunction doNotification(options, callback) {\n  var initial, argsList;\n\n  options = utils.mapToNotifySend(options);\n  options.title = options.title || 'Node Notification:';\n\n  initial = [options.title, options.message];\n  delete options.title;\n  delete options.message;\n\n  argsList = utils.constructArgumentList(options, {\n    initial: initial,\n    keyExtra: '-',\n    allowedArguments: allowedArguments\n  });\n\n  utils.command(notifier, argsList, callback);\n}\n"]},"metadata":{},"sourceType":"script"}