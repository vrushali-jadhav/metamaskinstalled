{"ast":null,"code":"var os = require('os');\n\nvar utils = require('./lib/utils'); // All notifiers\n\n\nvar NotifySend = require('./notifiers/notifysend');\n\nvar NotificationCenter = require('./notifiers/notificationcenter');\n\nvar WindowsToaster = require('./notifiers/toaster');\n\nvar Growl = require('./notifiers/growl');\n\nvar WindowsBalloon = require('./notifiers/balloon');\n\nvar options = {\n  withFallback: true\n};\nvar osType = utils.isWSL() ? 'WSL' : os.type();\n\nswitch (osType) {\n  case 'Linux':\n    module.exports = new NotifySend(options);\n    module.exports.Notification = NotifySend;\n    break;\n\n  case 'Darwin':\n    module.exports = new NotificationCenter(options);\n    module.exports.Notification = NotificationCenter;\n    break;\n\n  case 'Windows_NT':\n    if (utils.isLessThanWin8()) {\n      module.exports = new WindowsBalloon(options);\n      module.exports.Notification = WindowsBalloon;\n    } else {\n      module.exports = new WindowsToaster(options);\n      module.exports.Notification = WindowsToaster;\n    }\n\n    break;\n\n  case 'WSL':\n    module.exports = new WindowsToaster(options);\n    module.exports.Notification = WindowsToaster;\n    break;\n\n  default:\n    if (os.type().match(/BSD$/)) {\n      module.exports = new NotifySend(options);\n      module.exports.Notification = NotifySend;\n    } else {\n      module.exports = new Growl(options);\n      module.exports.Notification = Growl;\n    }\n\n} // Expose notifiers to give full control.\n\n\nmodule.exports.NotifySend = NotifySend;\nmodule.exports.NotificationCenter = NotificationCenter;\nmodule.exports.WindowsToaster = WindowsToaster;\nmodule.exports.WindowsBalloon = WindowsBalloon;\nmodule.exports.Growl = Growl;","map":{"version":3,"sources":["/Users/vrushalij/Desktop/Submission/css_updated/Frontend/node_modules/node-notifier/index.js"],"names":["os","require","utils","NotifySend","NotificationCenter","WindowsToaster","Growl","WindowsBalloon","options","withFallback","osType","isWSL","type","module","exports","Notification","isLessThanWin8","match"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAAnB,C,CAEA;;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,wBAAD,CAAxB;;AACA,IAAIG,kBAAkB,GAAGH,OAAO,CAAC,gCAAD,CAAhC;;AACA,IAAII,cAAc,GAAGJ,OAAO,CAAC,qBAAD,CAA5B;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIM,cAAc,GAAGN,OAAO,CAAC,qBAAD,CAA5B;;AAEA,IAAIO,OAAO,GAAG;AAAEC,EAAAA,YAAY,EAAE;AAAhB,CAAd;AAEA,IAAIC,MAAM,GAAGR,KAAK,CAACS,KAAN,KAAgB,KAAhB,GAAwBX,EAAE,CAACY,IAAH,EAArC;;AAEA,QAAQF,MAAR;AACE,OAAK,OAAL;AACEG,IAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIX,UAAJ,CAAeK,OAAf,CAAjB;AACAK,IAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BZ,UAA9B;AACA;;AACF,OAAK,QAAL;AACEU,IAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIV,kBAAJ,CAAuBI,OAAvB,CAAjB;AACAK,IAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BX,kBAA9B;AACA;;AACF,OAAK,YAAL;AACE,QAAIF,KAAK,CAACc,cAAN,EAAJ,EAA4B;AAC1BH,MAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIP,cAAJ,CAAmBC,OAAnB,CAAjB;AACAK,MAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BR,cAA9B;AACD,KAHD,MAGO;AACLM,MAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIT,cAAJ,CAAmBG,OAAnB,CAAjB;AACAK,MAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BV,cAA9B;AACD;;AACD;;AACF,OAAK,KAAL;AACEQ,IAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIT,cAAJ,CAAmBG,OAAnB,CAAjB;AACAK,IAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BV,cAA9B;AACA;;AACF;AACE,QAAIL,EAAE,CAACY,IAAH,GAAUK,KAAV,CAAgB,MAAhB,CAAJ,EAA6B;AAC3BJ,MAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIX,UAAJ,CAAeK,OAAf,CAAjB;AACAK,MAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BZ,UAA9B;AACD,KAHD,MAGO;AACLU,MAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIR,KAAJ,CAAUE,OAAV,CAAjB;AACAK,MAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BT,KAA9B;AACD;;AA7BL,C,CAgCA;;;AACAO,MAAM,CAACC,OAAP,CAAeX,UAAf,GAA4BA,UAA5B;AACAU,MAAM,CAACC,OAAP,CAAeV,kBAAf,GAAoCA,kBAApC;AACAS,MAAM,CAACC,OAAP,CAAeT,cAAf,GAAgCA,cAAhC;AACAQ,MAAM,CAACC,OAAP,CAAeP,cAAf,GAAgCA,cAAhC;AACAM,MAAM,CAACC,OAAP,CAAeR,KAAf,GAAuBA,KAAvB","sourcesContent":["var os = require('os');\nvar utils = require('./lib/utils');\n\n// All notifiers\nvar NotifySend = require('./notifiers/notifysend');\nvar NotificationCenter = require('./notifiers/notificationcenter');\nvar WindowsToaster = require('./notifiers/toaster');\nvar Growl = require('./notifiers/growl');\nvar WindowsBalloon = require('./notifiers/balloon');\n\nvar options = { withFallback: true };\n\nvar osType = utils.isWSL() ? 'WSL' : os.type();\n\nswitch (osType) {\n  case 'Linux':\n    module.exports = new NotifySend(options);\n    module.exports.Notification = NotifySend;\n    break;\n  case 'Darwin':\n    module.exports = new NotificationCenter(options);\n    module.exports.Notification = NotificationCenter;\n    break;\n  case 'Windows_NT':\n    if (utils.isLessThanWin8()) {\n      module.exports = new WindowsBalloon(options);\n      module.exports.Notification = WindowsBalloon;\n    } else {\n      module.exports = new WindowsToaster(options);\n      module.exports.Notification = WindowsToaster;\n    }\n    break;\n  case 'WSL':\n    module.exports = new WindowsToaster(options);\n    module.exports.Notification = WindowsToaster;\n    break;\n  default:\n    if (os.type().match(/BSD$/)) {\n      module.exports = new NotifySend(options);\n      module.exports.Notification = NotifySend;\n    } else {\n      module.exports = new Growl(options);\n      module.exports.Notification = Growl;\n    }\n}\n\n// Expose notifiers to give full control.\nmodule.exports.NotifySend = NotifySend;\nmodule.exports.NotificationCenter = NotificationCenter;\nmodule.exports.WindowsToaster = WindowsToaster;\nmodule.exports.WindowsBalloon = WindowsBalloon;\nmodule.exports.Growl = Growl;\n"]},"metadata":{},"sourceType":"script"}