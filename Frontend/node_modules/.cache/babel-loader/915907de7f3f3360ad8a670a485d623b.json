{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\n\nconst path = require('path');\n\nconst fs = require('graceful-fs');\n\nconst writeFileAtomic = require('write-file-atomic');\n\nconst sortKeys = require('sort-keys');\n\nconst makeDir = require('make-dir');\n\nconst detectIndent = require('detect-indent');\n\nconst isPlainObj = require('is-plain-obj');\n\nconst readFile = promisify(fs.readFile);\n\nconst init = (fn, filePath, data, options) => {\n  if (!filePath) {\n    throw new TypeError('Expected a filepath');\n  }\n\n  if (data === undefined) {\n    throw new TypeError('Expected data to stringify');\n  }\n\n  options = {\n    indent: '\\t',\n    sortKeys: false,\n    ...options\n  };\n\n  if (options.sortKeys && isPlainObj(data)) {\n    data = sortKeys(data, {\n      deep: true,\n      compare: typeof options.sortKeys === 'function' ? options.sortKeys : undefined\n    });\n  }\n\n  return fn(filePath, data, options);\n};\n\nconst main = async (filePath, data, options) => {\n  let {\n    indent\n  } = options;\n  let trailingNewline = '\\n';\n\n  try {\n    const file = await readFile(filePath, 'utf8');\n\n    if (!file.endsWith('\\n')) {\n      trailingNewline = '';\n    }\n\n    if (options.detectIndent) {\n      indent = detectIndent(file).indent;\n    }\n  } catch (error) {\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n\n  const json = JSON.stringify(data, options.replacer, indent);\n  return writeFileAtomic(filePath, `${json}${trailingNewline}`, {\n    mode: options.mode,\n    chown: false\n  });\n};\n\nconst mainSync = (filePath, data, options) => {\n  let {\n    indent\n  } = options;\n  let trailingNewline = '\\n';\n\n  try {\n    const file = fs.readFileSync(filePath, 'utf8');\n\n    if (!file.endsWith('\\n')) {\n      trailingNewline = '';\n    }\n\n    if (options.detectIndent) {\n      indent = detectIndent(file).indent;\n    }\n  } catch (error) {\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n\n  const json = JSON.stringify(data, options.replacer, indent);\n  return writeFileAtomic.sync(filePath, `${json}${trailingNewline}`, {\n    mode: options.mode,\n    chown: false\n  });\n};\n\nmodule.exports = async (filePath, data, options) => {\n  await makeDir(path.dirname(filePath), {\n    fs\n  });\n  return init(main, filePath, data, options);\n};\n\nmodule.exports.sync = (filePath, data, options) => {\n  makeDir.sync(path.dirname(filePath), {\n    fs\n  });\n  init(mainSync, filePath, data, options);\n};","map":{"version":3,"sources":["/Users/vrushalij/Desktop/Blockchain/HarshUpdated/evoting-react-auth/Frontend/node_modules/write-json-file/index.js"],"names":["promisify","require","path","fs","writeFileAtomic","sortKeys","makeDir","detectIndent","isPlainObj","readFile","init","fn","filePath","data","options","TypeError","undefined","indent","deep","compare","main","trailingNewline","file","endsWith","error","code","json","JSON","stringify","replacer","mode","chown","mainSync","readFileSync","sync","module","exports","dirname"],"mappings":"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","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst path = require('path');\nconst fs = require('graceful-fs');\nconst writeFileAtomic = require('write-file-atomic');\nconst sortKeys = require('sort-keys');\nconst makeDir = require('make-dir');\nconst detectIndent = require('detect-indent');\nconst isPlainObj = require('is-plain-obj');\n\nconst readFile = promisify(fs.readFile);\n\nconst init = (fn, filePath, data, options) => {\n\tif (!filePath) {\n\t\tthrow new TypeError('Expected a filepath');\n\t}\n\n\tif (data === undefined) {\n\t\tthrow new TypeError('Expected data to stringify');\n\t}\n\n\toptions = {\n\t\tindent: '\\t',\n\t\tsortKeys: false,\n\t\t...options\n\t};\n\n\tif (options.sortKeys && isPlainObj(data)) {\n\t\tdata = sortKeys(data, {\n\t\t\tdeep: true,\n\t\t\tcompare: typeof options.sortKeys === 'function' ? options.sortKeys : undefined\n\t\t});\n\t}\n\n\treturn fn(filePath, data, options);\n};\n\nconst main = async (filePath, data, options) => {\n\tlet {indent} = options;\n\tlet trailingNewline = '\\n';\n\ttry {\n\t\tconst file = await readFile(filePath, 'utf8');\n\t\tif (!file.endsWith('\\n')) {\n\t\t\ttrailingNewline = '';\n\t\t}\n\n\t\tif (options.detectIndent) {\n\t\t\tindent = detectIndent(file).indent;\n\t\t}\n\t} catch (error) {\n\t\tif (error.code !== 'ENOENT') {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tconst json = JSON.stringify(data, options.replacer, indent);\n\n\treturn writeFileAtomic(filePath, `${json}${trailingNewline}`, {mode: options.mode, chown: false});\n};\n\nconst mainSync = (filePath, data, options) => {\n\tlet {indent} = options;\n\tlet trailingNewline = '\\n';\n\ttry {\n\t\tconst file = fs.readFileSync(filePath, 'utf8');\n\t\tif (!file.endsWith('\\n')) {\n\t\t\ttrailingNewline = '';\n\t\t}\n\n\t\tif (options.detectIndent) {\n\t\t\tindent = detectIndent(file).indent;\n\t\t}\n\t} catch (error) {\n\t\tif (error.code !== 'ENOENT') {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tconst json = JSON.stringify(data, options.replacer, indent);\n\n\treturn writeFileAtomic.sync(filePath, `${json}${trailingNewline}`, {mode: options.mode, chown: false});\n};\n\nmodule.exports = async (filePath, data, options) => {\n\tawait makeDir(path.dirname(filePath), {fs});\n\treturn init(main, filePath, data, options);\n};\n\nmodule.exports.sync = (filePath, data, options) => {\n\tmakeDir.sync(path.dirname(filePath), {fs});\n\tinit(mainSync, filePath, data, options);\n};\n"]},"metadata":{},"sourceType":"script"}