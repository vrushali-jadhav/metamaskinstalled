{"ast":null,"code":"// Generated by CoffeeScript 1.3.3\n(function () {\n  var scan;\n\n  scan = function (string, pattern, callback) {\n    var match, result;\n    result = \"\";\n\n    while (string.length > 0) {\n      match = string.match(pattern);\n\n      if (match) {\n        result += string.slice(0, match.index);\n        result += callback(match);\n        string = string.slice(match.index + match[0].length);\n      } else {\n        result += string;\n        string = \"\";\n      }\n    }\n\n    return result;\n  };\n\n  exports.split = function (line) {\n    var field, words;\n\n    if (line == null) {\n      line = \"\";\n    }\n\n    words = [];\n    field = \"\";\n    scan(line, /\\s*(?:([^\\s\\\\\\'\\\"]+)|'((?:[^\\'\\\\]|\\\\.)*)'|\"((?:[^\\\"\\\\]|\\\\.)*)\"|(\\\\.?)|(\\S))(\\s|$)?/, function (match) {\n      var dq, escape, garbage, raw, seperator, sq, word;\n      raw = match[0], word = match[1], sq = match[2], dq = match[3], escape = match[4], garbage = match[5], seperator = match[6];\n\n      if (garbage != null) {\n        throw new Error(\"Unmatched quote\");\n      }\n\n      field += word || (sq || dq || escape).replace(/\\\\(?=.)/, \"\");\n\n      if (seperator != null) {\n        words.push(field);\n        return field = \"\";\n      }\n    });\n\n    if (field) {\n      words.push(field);\n    }\n\n    return words;\n  };\n\n  exports.escape = function (str) {\n    if (str == null) {\n      str = \"\";\n    }\n\n    if (str == null) {\n      return \"''\";\n    }\n\n    return str.replace(/([^A-Za-z0-9_\\-.,:\\/@\\n])/g, \"\\\\$1\").replace(/\\n/g, \"'\\n'\");\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/vrushalij/Desktop/Blockchain/HarshUpdated/evoting-react-auth/Frontend/node_modules/shellwords/lib/shellwords.js"],"names":["scan","string","pattern","callback","match","result","length","slice","index","exports","split","line","field","words","dq","escape","garbage","raw","seperator","sq","word","Error","replace","push","str","call"],"mappings":"AAAA;AACA,CAAC,YAAW;AACV,MAAIA,IAAJ;;AAEAA,EAAAA,IAAI,GAAG,UAASC,MAAT,EAAiBC,OAAjB,EAA0BC,QAA1B,EAAoC;AACzC,QAAIC,KAAJ,EAAWC,MAAX;AACAA,IAAAA,MAAM,GAAG,EAAT;;AACA,WAAOJ,MAAM,CAACK,MAAP,GAAgB,CAAvB,EAA0B;AACxBF,MAAAA,KAAK,GAAGH,MAAM,CAACG,KAAP,CAAaF,OAAb,CAAR;;AACA,UAAIE,KAAJ,EAAW;AACTC,QAAAA,MAAM,IAAIJ,MAAM,CAACM,KAAP,CAAa,CAAb,EAAgBH,KAAK,CAACI,KAAtB,CAAV;AACAH,QAAAA,MAAM,IAAIF,QAAQ,CAACC,KAAD,CAAlB;AACAH,QAAAA,MAAM,GAAGA,MAAM,CAACM,KAAP,CAAaH,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAAC,CAAD,CAAL,CAASE,MAApC,CAAT;AACD,OAJD,MAIO;AACLD,QAAAA,MAAM,IAAIJ,MAAV;AACAA,QAAAA,MAAM,GAAG,EAAT;AACD;AACF;;AACD,WAAOI,MAAP;AACD,GAfD;;AAiBAI,EAAAA,OAAO,CAACC,KAAR,GAAgB,UAASC,IAAT,EAAe;AAC7B,QAAIC,KAAJ,EAAWC,KAAX;;AACA,QAAIF,IAAI,IAAI,IAAZ,EAAkB;AAChBA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDE,IAAAA,KAAK,GAAG,EAAR;AACAD,IAAAA,KAAK,GAAG,EAAR;AACAZ,IAAAA,IAAI,CAACW,IAAD,EAAO,oFAAP,EAA6F,UAASP,KAAT,EAAgB;AAC/G,UAAIU,EAAJ,EAAQC,MAAR,EAAgBC,OAAhB,EAAyBC,GAAzB,EAA8BC,SAA9B,EAAyCC,EAAzC,EAA6CC,IAA7C;AACAH,MAAAA,GAAG,GAAGb,KAAK,CAAC,CAAD,CAAX,EAAgBgB,IAAI,GAAGhB,KAAK,CAAC,CAAD,CAA5B,EAAiCe,EAAE,GAAGf,KAAK,CAAC,CAAD,CAA3C,EAAgDU,EAAE,GAAGV,KAAK,CAAC,CAAD,CAA1D,EAA+DW,MAAM,GAAGX,KAAK,CAAC,CAAD,CAA7E,EAAkFY,OAAO,GAAGZ,KAAK,CAAC,CAAD,CAAjG,EAAsGc,SAAS,GAAGd,KAAK,CAAC,CAAD,CAAvH;;AACA,UAAIY,OAAO,IAAI,IAAf,EAAqB;AACnB,cAAM,IAAIK,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACDT,MAAAA,KAAK,IAAIQ,IAAI,IAAI,CAACD,EAAE,IAAIL,EAAN,IAAYC,MAAb,EAAqBO,OAArB,CAA6B,SAA7B,EAAwC,EAAxC,CAAjB;;AACA,UAAIJ,SAAS,IAAI,IAAjB,EAAuB;AACrBL,QAAAA,KAAK,CAACU,IAAN,CAAWX,KAAX;AACA,eAAOA,KAAK,GAAG,EAAf;AACD;AACF,KAXG,CAAJ;;AAYA,QAAIA,KAAJ,EAAW;AACTC,MAAAA,KAAK,CAACU,IAAN,CAAWX,KAAX;AACD;;AACD,WAAOC,KAAP;AACD,GAvBD;;AAyBAJ,EAAAA,OAAO,CAACM,MAAR,GAAiB,UAASS,GAAT,EAAc;AAC7B,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACfA,MAAAA,GAAG,GAAG,EAAN;AACD;;AACD,QAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,aAAO,IAAP;AACD;;AACD,WAAOA,GAAG,CAACF,OAAJ,CAAY,4BAAZ,EAA0C,MAA1C,EAAkDA,OAAlD,CAA0D,KAA1D,EAAiE,MAAjE,CAAP;AACD,GARD;AAUD,CAvDD,EAuDGG,IAvDH,CAuDQ,IAvDR","sourcesContent":["// Generated by CoffeeScript 1.3.3\n(function() {\n  var scan;\n\n  scan = function(string, pattern, callback) {\n    var match, result;\n    result = \"\";\n    while (string.length > 0) {\n      match = string.match(pattern);\n      if (match) {\n        result += string.slice(0, match.index);\n        result += callback(match);\n        string = string.slice(match.index + match[0].length);\n      } else {\n        result += string;\n        string = \"\";\n      }\n    }\n    return result;\n  };\n\n  exports.split = function(line) {\n    var field, words;\n    if (line == null) {\n      line = \"\";\n    }\n    words = [];\n    field = \"\";\n    scan(line, /\\s*(?:([^\\s\\\\\\'\\\"]+)|'((?:[^\\'\\\\]|\\\\.)*)'|\"((?:[^\\\"\\\\]|\\\\.)*)\"|(\\\\.?)|(\\S))(\\s|$)?/, function(match) {\n      var dq, escape, garbage, raw, seperator, sq, word;\n      raw = match[0], word = match[1], sq = match[2], dq = match[3], escape = match[4], garbage = match[5], seperator = match[6];\n      if (garbage != null) {\n        throw new Error(\"Unmatched quote\");\n      }\n      field += word || (sq || dq || escape).replace(/\\\\(?=.)/, \"\");\n      if (seperator != null) {\n        words.push(field);\n        return field = \"\";\n      }\n    });\n    if (field) {\n      words.push(field);\n    }\n    return words;\n  };\n\n  exports.escape = function(str) {\n    if (str == null) {\n      str = \"\";\n    }\n    if (str == null) {\n      return \"''\";\n    }\n    return str.replace(/([^A-Za-z0-9_\\-.,:\\/@\\n])/g, \"\\\\$1\").replace(/\\n/g, \"'\\n'\");\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}