{"ast":null,"code":"/**\n * Wrapper for the growly module\n */\nvar checkGrowl = require('../lib/checkGrowl');\n\nvar utils = require('../lib/utils');\n\nvar growly = require('growly');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar errorMessageNotFound = \"Couldn't connect to growl (might be used as a fallback). Make sure it is running\";\nmodule.exports = Growl;\nvar hasGrowl;\n\nfunction Growl(options) {\n  options = utils.clone(options || {});\n\n  if (!(this instanceof Growl)) {\n    return new Growl(options);\n  }\n\n  growly.appname = options.name || 'Node';\n  this.options = options;\n  EventEmitter.call(this);\n}\n\nutil.inherits(Growl, EventEmitter);\n\nGrowl.prototype.notify = function (options, callback) {\n  growly.setHost(this.options.host, this.options.port);\n  options = utils.clone(options || {});\n\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n\n  callback = utils.actionJackerDecorator(this, options, callback, function (data) {\n    if (data === 'click') {\n      return 'click';\n    }\n\n    if (data === 'timedout') {\n      return 'timeout';\n    }\n\n    return false;\n  });\n  options = utils.mapToGrowl(options);\n\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  options.title = options.title || 'Node Notification:';\n\n  if (hasGrowl || !!options.wait) {\n    var localCallback = options.wait ? callback : noop;\n    growly.notify(options.message, options, localCallback);\n    if (!options.wait) callback();\n    return this;\n  }\n\n  checkGrowl(growly, function (_, didHaveGrowl) {\n    hasGrowl = didHaveGrowl;\n    if (!didHaveGrowl) return callback(new Error(errorMessageNotFound));\n    growly.notify(options.message, options);\n    callback();\n  });\n  return this;\n};\n\nfunction noop() {}","map":{"version":3,"sources":["/Users/vrushalij/Desktop/Submission/css_updated/Frontend/node_modules/node-notifier/notifiers/growl.js"],"names":["checkGrowl","require","utils","growly","EventEmitter","util","errorMessageNotFound","module","exports","Growl","hasGrowl","options","clone","appname","name","call","inherits","prototype","notify","callback","setHost","host","port","title","message","actionJackerDecorator","data","mapToGrowl","Error","wait","localCallback","noop","_","didHaveGrowl"],"mappings":"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","sourcesContent":["/**\n * Wrapper for the growly module\n */\nvar checkGrowl = require('../lib/checkGrowl');\nvar utils = require('../lib/utils');\nvar growly = require('growly');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar errorMessageNotFound =\n  \"Couldn't connect to growl (might be used as a fallback). Make sure it is running\";\n\nmodule.exports = Growl;\n\nvar hasGrowl;\n\nfunction Growl(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof Growl)) {\n    return new Growl(options);\n  }\n\n  growly.appname = options.name || 'Node';\n  this.options = options;\n\n  EventEmitter.call(this);\n}\nutil.inherits(Growl, EventEmitter);\n\nGrowl.prototype.notify = function(options, callback) {\n  growly.setHost(this.options.host, this.options.port);\n  options = utils.clone(options || {});\n\n  if (typeof options === 'string') {\n    options = { title: 'node-notifier', message: options };\n  }\n\n  callback = utils.actionJackerDecorator(this, options, callback, function(\n    data\n  ) {\n    if (data === 'click') {\n      return 'click';\n    }\n    if (data === 'timedout') {\n      return 'timeout';\n    }\n    return false;\n  });\n\n  options = utils.mapToGrowl(options);\n\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n\n  options.title = options.title || 'Node Notification:';\n\n  if (hasGrowl || !!options.wait) {\n    var localCallback = options.wait ? callback : noop;\n    growly.notify(options.message, options, localCallback);\n    if (!options.wait) callback();\n    return this;\n  }\n\n  checkGrowl(growly, function(_, didHaveGrowl) {\n    hasGrowl = didHaveGrowl;\n    if (!didHaveGrowl) return callback(new Error(errorMessageNotFound));\n    growly.notify(options.message, options);\n    callback();\n  });\n  return this;\n};\n\nfunction noop() {}\n"]},"metadata":{},"sourceType":"script"}