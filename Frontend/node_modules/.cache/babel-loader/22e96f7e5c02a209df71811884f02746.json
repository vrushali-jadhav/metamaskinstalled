{"ast":null,"code":"var GNTP = require('./gntp.js');\n/**\n * Interface for registering Growl applications and sending Growl notifications.\n *\n * @api private\n */\n\n\nfunction Growly() {\n  this.appname = 'Growly';\n  this.notifications = undefined;\n  this.labels = undefined;\n  this.count = 0;\n  this.registered = false;\n  this.host = undefined;\n  this.port = undefined;\n}\n/**\n * Returns an array of label strings extracted from each notification object in\n * `Growly.notifications`.\n *\n * @param {Array} notifications\n * @return {Array} notification labels\n * @api private\n */\n\n\nGrowly.prototype.getLabels = function () {\n  return this.notifications.map(function (notif) {\n    return notif.label;\n  });\n};\n/**\n * Set the host to be used by GNTP requests.\n *\n * @param {String} host\n * @param {Number} port\n * @api public\n */\n\n\nGrowly.prototype.setHost = function (host, port) {\n  this.host = host;\n  this.port = port;\n};\n/**\n * Register an application with the name `appname` (required), icon `appicon`, and\n * a list of notification types `notifications`. If provided, `callback` will be\n * called when the request completes with the first argument being an `err` error\n * object if the request failed.\n *\n * Each object in the `notifications` array defines a type of notification the\n * application will have with the following properties:\n *\n *  - `.label` name used to identify the type of notification being used (required)\n *  - `.dispname` name users will see in Growl's preference panel (defaults to `.label`)\n *  - `.enabled` whether or not notifications of this type are enabled (defaults to true)\n *  - `.icon` default icon notifications of this type should use (url, file path, or Buffer object)\n *\n *  Example registration:\n *\n *      growl.register('My Application', 'path/to/icon.png', [\n *          { label: 'success', dispname: 'Success', icon: 'path/to/success.png' },\n *          { label: 'warning', dispname: 'Warning', icon: 'path/to/warning.png', enabled: false }\n *      ], function(err) { console.log(err || 'Registration successful!'); });\n *\n * @param {String} appname\n * @param {String|Buffer} appicon\n * @param {Array} notifications\n * @param {Function} callback\n * @api public\n */\n\n\nGrowly.prototype.register = function (appname, appicon, notifications, callback) {\n  var gntp;\n\n  if (typeof appicon === 'object') {\n    notifications = appicon;\n    appicon = undefined;\n  }\n\n  if (notifications === undefined || !notifications.length) {\n    notifications = [{\n      label: 'default',\n      dispname: 'Default Notification',\n      enabled: true\n    }];\n  }\n\n  if (typeof arguments[arguments.length - 1] === 'function') {\n    callback = arguments[arguments.length - 1];\n  } else {\n    callback = function () {};\n  }\n\n  this.appname = appname;\n  this.notifications = notifications;\n  this.labels = this.getLabels();\n  this.registered = true;\n  gntp = new GNTP('REGISTER', {\n    host: this.host,\n    port: this.port\n  });\n  gntp.add('Application-Name', appname);\n  gntp.add('Application-Icon', appicon);\n  gntp.add('Notifications-Count', notifications.length);\n  gntp.newline();\n  notifications.forEach(function (notif) {\n    if (notif.enabled === undefined) notif.enabled = true;\n    gntp.add('Notification-Name', notif.label);\n    gntp.add('Notification-Display-Name', notif.dispname);\n    gntp.add('Notification-Enabled', notif.enabled ? 'True' : 'False');\n    gntp.add('Notification-Icon', notif.icon);\n    gntp.newline();\n  });\n  gntp.send(callback);\n};\n/**\n * Send a notification with `text` content. Growly will lazily register itself\n * if the user hasn't already before sending the notification.\n *\n * A notification can have the following `opts` options:\n *\n *  - `.label` type of notification to use (defaults to the first registered type)\n *  - `.title` title of the notification\n *  - `.icon` url, file path, or Buffer instance for the notification's icon.\n *  - `.sticky` whether or not to sticky the notification (defaults to false)\n *  - `.priority` the priority of the notification from lowest (-2) to highest (2)\n *  - `.coalescingId` replace/update the matching previous notification. May be ignored.\n *\n * If provided, `callback` will be called when the user interacts with the notification.\n * The first argument will be an `err` error object, and the second argument an `action`\n * string equal to either 'clicked' or 'closed' (whichever action the user took.)\n *\n * Example notification:\n *\n *     growl.notify('Stuffs broken!', { label: 'warning' }, function(err, action) {\n *         console.log('Action:', action);\n *     });\n *\n * @param {String} text\n * @param {Object} opts\n * @param {Function} callback\n * @api public\n */\n\n\nGrowly.prototype.notify = function (text, opts, callback) {\n  var self = this,\n      gntp;\n  /* Lazy registration. */\n\n  if (!this.registered) {\n    this.register(this.appname, function (err) {\n      if (err) console.log(err);\n      self.notify.call(self, text, opts, callback);\n    });\n    return;\n  }\n\n  opts = opts || {};\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  gntp = new GNTP('NOTIFY', {\n    host: this.host,\n    port: this.port\n  });\n  gntp.add('Application-Name', this.appname);\n  gntp.add('Notification-Name', opts.label || this.labels[0]);\n  gntp.add('Notification-ID', ++this.count);\n  gntp.add('Notification-Title', opts.title);\n  gntp.add('Notification-Text', text);\n  gntp.add('Notification-Sticky', opts.sticky ? 'True' : 'False');\n  gntp.add('Notification-Priority', opts.priority);\n  gntp.add('Notification-Icon', opts.icon);\n  gntp.add('Notification-Coalescing-ID', opts.coalescingId || undefined);\n  gntp.add('Notification-Callback-Context', callback ? 'context' : undefined);\n  gntp.add('Notification-Callback-Context-Type', callback ? 'string' : undefined);\n  gntp.add('Notification-Callback-Target', undefined);\n  gntp.newline();\n  gntp.send(function (err, resp) {\n    if (callback && err) {\n      callback(err);\n    } else if (callback && resp.state === 'CALLBACK') {\n      callback(undefined, resp['Notification-Callback-Result'].toLowerCase());\n    }\n  });\n};\n/**\n * Expose an instance of the Growly object.\n */\n\n\nmodule.exports = new Growly();","map":{"version":3,"sources":["/Users/vrushalij/Desktop/Submission/css_updated/Frontend/node_modules/growly/lib/growly.js"],"names":["GNTP","require","Growly","appname","notifications","undefined","labels","count","registered","host","port","prototype","getLabels","map","notif","label","setHost","register","appicon","callback","gntp","length","dispname","enabled","arguments","add","newline","forEach","icon","send","notify","text","opts","self","err","console","log","call","title","sticky","priority","coalescingId","resp","state","toLowerCase","module","exports"],"mappings":"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","sourcesContent":["var GNTP = require('./gntp.js');\n\n/**\n * Interface for registering Growl applications and sending Growl notifications.\n *\n * @api private\n */\n\nfunction Growly() {\n    this.appname = 'Growly';\n    this.notifications = undefined;\n    this.labels = undefined;\n    this.count = 0;\n    this.registered = false;\n    this.host = undefined;\n    this.port = undefined;\n}\n\n/**\n * Returns an array of label strings extracted from each notification object in\n * `Growly.notifications`.\n *\n * @param {Array} notifications\n * @return {Array} notification labels\n * @api private\n */\n\nGrowly.prototype.getLabels = function() {\n    return this.notifications.map(function(notif) {\n        return notif.label;\n    });\n};\n\n/**\n * Set the host to be used by GNTP requests.\n *\n * @param {String} host\n * @param {Number} port\n * @api public\n */\n\nGrowly.prototype.setHost = function(host, port) {\n    this.host = host;\n    this.port = port;\n};\n\n/**\n * Register an application with the name `appname` (required), icon `appicon`, and\n * a list of notification types `notifications`. If provided, `callback` will be\n * called when the request completes with the first argument being an `err` error\n * object if the request failed.\n *\n * Each object in the `notifications` array defines a type of notification the\n * application will have with the following properties:\n *\n *  - `.label` name used to identify the type of notification being used (required)\n *  - `.dispname` name users will see in Growl's preference panel (defaults to `.label`)\n *  - `.enabled` whether or not notifications of this type are enabled (defaults to true)\n *  - `.icon` default icon notifications of this type should use (url, file path, or Buffer object)\n *\n *  Example registration:\n *\n *      growl.register('My Application', 'path/to/icon.png', [\n *          { label: 'success', dispname: 'Success', icon: 'path/to/success.png' },\n *          { label: 'warning', dispname: 'Warning', icon: 'path/to/warning.png', enabled: false }\n *      ], function(err) { console.log(err || 'Registration successful!'); });\n *\n * @param {String} appname\n * @param {String|Buffer} appicon\n * @param {Array} notifications\n * @param {Function} callback\n * @api public\n */\n\nGrowly.prototype.register = function(appname, appicon, notifications, callback) {\n    var gntp;\n\n    if (typeof appicon === 'object') {\n        notifications = appicon;\n        appicon = undefined;\n    }\n\n    if (notifications === undefined || !notifications.length) {\n        notifications = [{ label: 'default', dispname: 'Default Notification', enabled: true }];\n    }\n\n    if (typeof arguments[arguments.length - 1] === 'function') {\n        callback = arguments[arguments.length - 1];\n    } else {\n        callback = function() {};\n    }\n\n    this.appname = appname;\n    this.notifications = notifications;\n    this.labels = this.getLabels();\n    this.registered = true;\n\n    gntp = new GNTP('REGISTER', { host: this.host, port: this.port });\n    gntp.add('Application-Name', appname);\n    gntp.add('Application-Icon', appicon);\n    gntp.add('Notifications-Count', notifications.length);\n    gntp.newline();\n\n    notifications.forEach(function(notif) {\n        if (notif.enabled === undefined) notif.enabled = true;\n        gntp.add('Notification-Name', notif.label);\n        gntp.add('Notification-Display-Name', notif.dispname);\n        gntp.add('Notification-Enabled', notif.enabled ? 'True' : 'False');\n        gntp.add('Notification-Icon', notif.icon);\n        gntp.newline();\n    });\n\n    gntp.send(callback);\n};\n\n/**\n * Send a notification with `text` content. Growly will lazily register itself\n * if the user hasn't already before sending the notification.\n *\n * A notification can have the following `opts` options:\n *\n *  - `.label` type of notification to use (defaults to the first registered type)\n *  - `.title` title of the notification\n *  - `.icon` url, file path, or Buffer instance for the notification's icon.\n *  - `.sticky` whether or not to sticky the notification (defaults to false)\n *  - `.priority` the priority of the notification from lowest (-2) to highest (2)\n *  - `.coalescingId` replace/update the matching previous notification. May be ignored.\n *\n * If provided, `callback` will be called when the user interacts with the notification.\n * The first argument will be an `err` error object, and the second argument an `action`\n * string equal to either 'clicked' or 'closed' (whichever action the user took.)\n *\n * Example notification:\n *\n *     growl.notify('Stuffs broken!', { label: 'warning' }, function(err, action) {\n *         console.log('Action:', action);\n *     });\n *\n * @param {String} text\n * @param {Object} opts\n * @param {Function} callback\n * @api public\n */\n\nGrowly.prototype.notify = function(text, opts, callback) {\n    var self = this,\n        gntp;\n\n    /* Lazy registration. */\n    if (!this.registered) {\n        this.register(this.appname, function(err) {\n            if (err) console.log(err);\n            self.notify.call(self, text, opts, callback);\n        });\n        return;\n    }\n\n    opts = opts || {};\n\n    if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n    }\n\n    gntp = new GNTP('NOTIFY', { host: this.host, port: this.port });\n    gntp.add('Application-Name', this.appname);\n    gntp.add('Notification-Name', opts.label || this.labels[0]);\n    gntp.add('Notification-ID', ++this.count);\n    gntp.add('Notification-Title', opts.title);\n    gntp.add('Notification-Text', text);\n    gntp.add('Notification-Sticky', opts.sticky ? 'True' : 'False');\n    gntp.add('Notification-Priority', opts.priority);\n    gntp.add('Notification-Icon', opts.icon);\n    gntp.add('Notification-Coalescing-ID', opts.coalescingId || undefined);\n    gntp.add('Notification-Callback-Context', callback ? 'context' : undefined);\n    gntp.add('Notification-Callback-Context-Type', callback ? 'string' : undefined);\n    gntp.add('Notification-Callback-Target', undefined);\n    gntp.newline();\n\n    gntp.send(function(err, resp) {\n        if (callback && err) {\n            callback(err);\n        } else if (callback && resp.state === 'CALLBACK') {\n            callback(undefined, resp['Notification-Callback-Result'].toLowerCase());\n        }\n    });\n};\n\n/**\n * Expose an instance of the Growly object.\n */\n\nmodule.exports = new Growly();\n"]},"metadata":{},"sourceType":"script"}