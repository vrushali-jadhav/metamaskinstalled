{"ast":null,"code":"var _jsxFileName = \"/Users/vrushalij/Desktop/Submission/css_updated/Frontend/src/CandidateList.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport web3 from './web3';\nimport { Button, Modal } from 'react-bootstrap';\nimport VoterContract from './VoterContract';\nimport './camp.css';\nimport classnames from 'classnames';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport Listing from './Listing';\n\nclass CandidateList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      candidates: [],\n      candidates2: [],\n      first_name: \"\",\n      last_name: \"\",\n      candidate_info: \"\",\n      candidate_desc: \"\",\n      voteCount: \"\",\n      showmodel: false\n    };\n    this.onChange = this.onChange.bind(this); //this.showmodel =this.showmodel(this);\n  }\n\n  showmodel() {\n    this.setState({\n      showmodel: true // profile: this.props.getProfile\n\n    });\n    console.log(this.state.showmodel);\n  }\n\n  doLogout() {\n    //UserStorage.username='';\n    this.props.history.push(\"/Login\");\n  }\n\n  hidemodel() {\n    this.setState({\n      showmodel: false // profile: this.props.getProfile\n\n    });\n  }\n\n  componentDidMount() {\n    //debugger\n    axios.get(`http://localhost:3003/candidatelist`).then(response => {\n      //debugger\n      console.log(\"response.data\", response.data.data); //console.log(response.data.candidates[0]);\n      //console.log(response.data.candidates[1]);\n\n      this.setState({\n        candidates: response.data.data // profile: this.props.getProfile\n\n      });\n      console.log(\"candidates from state\" + this.state.candidates);\n    });\n  }\n\n  onChange(e) {\n    // debugger\n    //    e.preventDefault();\n    // console.log( e.target.value);\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  async settleElection() {\n    const response = await fetch('http://localhost:3003/candidateCount', {\n      method: 'get',\n      headers: {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }\n    });\n    let result = await response.json();\n    console.log(\"Count from DB is\", result.data[0]);\n    var count = result.data[0].count;\n    console.log(\"count is: \" + count);\n    const responseStartFrom = await fetch('http://localhost:3003/getStartFrom', {\n      method: 'get',\n      headers: {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }\n    });\n    let resultStartFrom = await responseStartFrom.json();\n    console.log(\"Startfrom from DB is\", resultStartFrom.data[0]);\n    var startfrom = resultStartFrom.data[0].candidate_id;\n    console.log(\"Startfrom is: \" + startfrom);\n    var accounts = await web3.eth.getAccounts();\n    console.log(\"web3\", accounts);\n    console.log(\"aing: \" + accounts[0]);\n    web3.eth.defaultAccount = accounts[0];\n    var canid;\n    var canname;\n    var max = 0;\n\n    for (var i = startfrom; i < startfrom + count; i++) {\n      var blocandidate = await VoterContract.methods.getCandidateInformation(i).call();\n      console.log(\"candidate recieved from blockchain: \" + blocandidate);\n\n      if (blocandidate.voteCount > max) {\n        max = blocandidate.voteCount;\n        canid = blocandidate.candidate_id;\n        canname = blocandidate.first_name + blocandidate.last_name;\n      }\n    }\n  }\n\n  async handleAddCandidate(e) {\n    //  e.preventDefault();\n    try {\n      let res = await fetch('http://localhost:3003/newcandidate', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          first_name: this.state.first_name,\n          last_name: this.state.last_name,\n          candidate_info: this.state.candidate_info,\n          candidate_desc: this.state.candidate_desc,\n          voteCount: 0\n        })\n      });\n      let result = await res.json();\n      console.log(\"response from db: \", result);\n\n      if (result && result.success) {\n        //send information to blockchain\n        console.log(\"Voterid is : \" + result.candidate_id); //creating fake file\n\n        var id = result.candidate_id;\n        var firstname = this.state.first_name;\n        var lastname = this.state.last_name;\n        var info = this.state.candidate_info;\n        var desc = this.state.candidate_desc;\n        var voteCount = 0;\n        var accounts = await web3.eth.getAccounts();\n        console.log(\"web3\", accounts);\n        console.log(\"aing: \" + accounts[0]);\n        web3.eth.defaultAccount = accounts[0];\n        console.log(id);\n        await VoterContract.methods.addCandidate(id, firstname.toString(), lastname.toString(), info.toString(), desc.toString()).send({\n          from: accounts[0]\n        });\n        console.log(\"Candidate Stored on blockchain..\");\n        const candidate = await VoterContract.methods.getCandidateInformation(id).call();\n        console.log(\"Got the candidate information from blockchain: \" + candidate);\n        this.hidemodel();\n        swal.fire({\n          icon: 'success',\n          title: 'Congratulations!',\n          text: 'Candidate stored on blockchain',\n          confirmButtonText: \"OK\"\n        }).then(result => {\n          if (result.value) {\n            window.location.reload();\n          }\n        });\n        this.props.history.push(\"/candidatelist\");\n      } else if (result && result.success === false) {\n        console.log(\"Add candidate failed \");\n        swal.fire({\n          icon: 'error',\n          title: 'Failed to store candidate data in database',\n          text: 'Try Again',\n          confirmButtonText: \"OK\"\n        });\n        this.props.history.push(\"/adminlogin\");\n      }\n    } catch (e) {} //await this.props.handleAddEducation(newprofile);\n\n  }\n\n  render() {\n    //debugger\n    const columnClasses = classnames('column', 'col-4', 'col-xs-12');\n    const cardClasses = classnames('card');\n    let loopcandidate = this.state.candidates.map((candidate1, i) => {\n      return React.createElement(\"div\", {\n        className: \"coloumns\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: columnClasses,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"profileimg\",\n        src: \"https://react.semantic-ui.com/images/avatar/large/matthew.png\",\n        alt: \"avatar\",\n        style: {\n          width: '200px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      })), React.createElement(Card.Content, {\n        class: \"textcan\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, candidate1.first_name, \" \", candidate1.last_name), React.createElement(Card.Meta, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, candidate1.candidate_info), React.createElement(Card.Description, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, candidate1.candidate_desc)), React.createElement(Card.Content, {\n        extra: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }), \"Running For President\")))));\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.showmodel,\n      onHide: () => this.hidemodel(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      className: \"candinfo\",\n      placeholder: \"First Name\",\n      name: \"first_name\",\n      value: this.state.first_name,\n      onChange: this.onChange,\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      className: \"candinfo\",\n      placeholder: \"Last Name\",\n      name: \"last_name\",\n      value: this.state.last_name,\n      onChange: this.onChange,\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      className: \"candinfo\",\n      placeholder: \"Any political experience?\",\n      name: \"candidate_info\",\n      type: \"text\",\n      value: this.state.candidate_info,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      required: true,\n      className: \"candinfo\",\n      placeholder: \"Add a short description\",\n      name: \"candidate_desc\",\n      value: this.state.candidate_desc,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }))))), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"rg addcandi\",\n      id: \"rg\",\n      onClick: () => this.handleAddCandidate(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Add\"))), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"navbar-nav\",\n      id: \"navg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \" brand\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Electronic\")), React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"colorb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"Ballot\")), React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btnlogout\",\n      type: \"button\",\n      onClick: () => this.doLogout(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"Logout \")))), React.createElement(\"section\", {\n      className: \"mycard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"applicantheader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      id: \"setcamp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"nav-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"camp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Presidential Elections 2020\"), React.createElement(\"button\", {\n      className: \"btnsettle\",\n      type: \"button\",\n      onClick: () => this.settleElection(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"Settle Election\"), React.createElement(\"button\", {\n      className: \"btn can\",\n      type: \"button\",\n      \"data-toggle\": \"modal\",\n      \"data-target\": \"#addcandidate\",\n      onClick: () => this.showmodel(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"Add Candidate\")))), React.createElement(\"div\", {\n      className: \"columns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, loopcandidate))));\n  }\n\n} //Export The Main Component\n\n\nexport default CandidateList;","map":{"version":3,"sources":["/Users/vrushalij/Desktop/Submission/css_updated/Frontend/src/CandidateList.js"],"names":["React","Component","axios","swal","web3","Button","Modal","VoterContract","classnames","Card","Icon","Image","Listing","CandidateList","constructor","props","state","candidates","candidates2","first_name","last_name","candidate_info","candidate_desc","voteCount","showmodel","onChange","bind","setState","console","log","doLogout","history","push","hidemodel","componentDidMount","get","then","response","data","e","target","name","value","settleElection","fetch","method","headers","result","json","count","responseStartFrom","resultStartFrom","startfrom","candidate_id","accounts","eth","getAccounts","defaultAccount","canid","canname","max","i","blocandidate","methods","getCandidateInformation","call","handleAddCandidate","res","body","JSON","stringify","success","id","firstname","lastname","info","desc","addCandidate","toString","send","from","candidate","fire","icon","title","text","confirmButtonText","window","location","reload","render","columnClasses","cardClasses","loopcandidate","map","candidate1","width"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport web3 from './web3';\nimport { Button, Modal } from 'react-bootstrap';\nimport VoterContract from './VoterContract';\nimport './camp.css';\nimport classnames from 'classnames'\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport Listing from './Listing';\n\nclass CandidateList extends Component {\n    constructor(props){\n    super(props);\n    this.state= {\n        candidates:[],\n        candidates2:[],\n        first_name:\"\",\n        last_name:\"\",\n        candidate_info:\"\",\n        candidate_desc:\"\",\n        voteCount:\"\",\n        showmodel:false\n    };\n   this.onChange = this.onChange.bind(this);\n    //this.showmodel =this.showmodel(this);\n}\nshowmodel(){\n    this.setState({\n        showmodel: true\n        // profile: this.props.getProfile\n    });\n    console.log(this.state.showmodel);\n}\n\ndoLogout(){\n    //UserStorage.username='';\n    this.props.history.push(\"/Login\");\n}\n\nhidemodel(){\n    this.setState({\n        showmodel: false\n        // profile: this.props.getProfile\n    });\n}\n     componentDidMount(){\n        //debugger\n\n         axios.get(`http://localhost:3003/candidatelist`)\n        .then((response) => {\n            //debugger\n            console.log(\"response.data\", response.data.data);\n            //console.log(response.data.candidates[0]);\n            //console.log(response.data.candidates[1]);\n            \n            this.setState({\n                candidates: response.data.data,\n                // profile: this.props.getProfile\n            });\n            console.log(\"candidates from state\"+ this.state.candidates);\n            \n        });\n        \n    }\n\n    onChange(e) {\n        // debugger\n    //    e.preventDefault();\n    // console.log( e.target.value);\n    this.setState({ [e.target.name]: e.target.value });\n    }\n\n    async settleElection()\n    {\n        const response = await fetch('http://localhost:3003/candidateCount', {\n          method: 'get',\n          headers: {\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }\n        });\n        \n        let result = await response.json();\n        console.log(\"Count from DB is\", result.data[0]);\n        var count = result.data[0].count;\n        console.log(\"count is: \"+count);\n        \n        const responseStartFrom = await fetch('http://localhost:3003/getStartFrom', {\n          method: 'get',\n          headers: {\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }\n        });\n\n        let resultStartFrom = await responseStartFrom.json();\n        console.log(\"Startfrom from DB is\", resultStartFrom.data[0]);\n        var startfrom = resultStartFrom.data[0].candidate_id;\n        console.log(\"Startfrom is: \"+startfrom);\n\n        var accounts = await web3.eth.getAccounts();\n        console.log(\"web3\", accounts);\n        console.log(\"aing: \"+ accounts[0]);\n        web3.eth.defaultAccount = accounts[0];\n           \n        var canid;\n        var canname;\n        var max=0\n        for (var i = startfrom; i < startfrom+count; i++) {\n          var blocandidate = await VoterContract.methods.getCandidateInformation(i).call();\n          console.log(\"candidate recieved from blockchain: \"+blocandidate);\n          if(blocandidate.voteCount > max)\n          {\n            max = blocandidate.voteCount;\n            canid = blocandidate.candidate_id;\n            canname = blocandidate.first_name + blocandidate.last_name ;\n          }\n        }\n        \n    }\n\n    async handleAddCandidate(e){\n        //  e.preventDefault();\n    try {\n        let res = await fetch('http://localhost:3003/newcandidate', {\n            method: 'post',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                first_name:this.state.first_name,\n                last_name:this.state.last_name,\n                candidate_info:this.state.candidate_info,\n                candidate_desc:this.state.candidate_desc,\n                voteCount:0\n            })\n        });\n        \n        let result = await res.json();\n        console.log(\"response from db: \", result);\n\n        if (result && result.success) {\n            //send information to blockchain\n            console.log(\"Voterid is : \"+result.candidate_id);\n            //creating fake file\n             \n                var id = result.candidate_id;\n                var firstname= this.state.first_name;\n                var lastname =this.state.last_name;\n                var info=this.state.candidate_info;\n                var desc=this.state.candidate_desc;\n                var voteCount=0\n           \n\n            var accounts = await web3.eth.getAccounts();\n            console.log(\"web3\", accounts);\n            console.log(\"aing: \"+ accounts[0]);\n            web3.eth.defaultAccount = accounts[0];\n            console.log(id);\n            \n            await VoterContract.methods.addCandidate(id, firstname.toString(),lastname.toString(),\n            info.toString(),desc.toString()).send({from: accounts[0]});\n            \n            console.log(\"Candidate Stored on blockchain..\");\n            const candidate = await VoterContract.methods.getCandidateInformation(id).call();\n            console.log(\"Got the candidate information from blockchain: \"+candidate);\n           \n            this.hidemodel();\n\n            swal.fire({\n                icon: 'success',\n                title: 'Congratulations!',\n                text: 'Candidate stored on blockchain',\n                confirmButtonText: \"OK\"\n            }).then((result) => {\n                if (result.value) {\n                    window.location.reload();\n                }\n              })\n         \n            this.props.history.push(\"/candidatelist\");\n        }\n\n        else if (result && result.success === false) {\n            console.log(\"Add candidate failed \")\n            swal.fire({\n                icon: 'error',\n                title: 'Failed to store candidate data in database',\n                text: 'Try Again',\n                confirmButtonText: \"OK\"\n            });\n\n            this.props.history.push(\"/adminlogin\");\n        }\n    }\n    catch (e) {\n\n    }\n        //await this.props.handleAddEducation(newprofile);\n    }\n    \n    render() {\n        //debugger\n        const columnClasses = classnames('column', 'col-4', 'col-xs-12')\n        const cardClasses = classnames('card')\n\n        let loopcandidate = this.state.candidates.map((candidate1, i) => {\n            return (\n        <div className=\"coloumns\" key={i}>\n            <div className={columnClasses}>\n                    <Card>\n                        <div >\n                         <img className=\"profileimg\" src='https://react.semantic-ui.com/images/avatar/large/matthew.png' alt=\"avatar\" style={{width:'200px'}} />\n                         <span ></span>                \n                         </div>\n                        <Card.Content class=\"textcan\">\n                            <Card.Header>{candidate1.first_name} {candidate1.last_name}</Card.Header>\n                            <Card.Meta>\n                            {candidate1.candidate_info}\n                            </Card.Meta>\n                            <Card.Description>\n                            {candidate1.candidate_desc}\n                        </Card.Description>\n                        </Card.Content>\n                        <Card.Content extra>\n                            <a>\n                                <Icon name='user' />\n                            Running For President\n                            </a>\n                        </Card.Content>\n                    </Card>\n                    </div>           \n                </div>\n            )\n        })\n        return (\n            <div>\n              \n <Modal show={this.state.showmodel} onHide={() => this.hidemodel()}>\n                <Modal.Header closeButton>\n                </Modal.Header>\n                <Modal.Body>\n                <div className=\"row\">\n                    <div>\n                        <div >\n                            <div>\n                                <input required className=\"candinfo\" placeholder=\"First Name\"name= \"first_name\" \n                                value={this.state.first_name} onChange={this.onChange} type=\"text\" />\n                            </div>\n                        </div>\n                        <div >\n                            <div>\n                                <input required className=\"candinfo\" placeholder=\"Last Name\" name= \"last_name\" \n                                value={this.state.last_name} onChange={this.onChange}type=\"text\" />\n                            </div>\n                        </div>\n                        <div >\n                            <input required className=\"candinfo\" placeholder=\"Any political experience?\" name =\"candidate_info\" \n                            type=\"text\" value={this.state.candidate_info} onChange={this.onChange} />\n                        </div>\n                        <div>\n                            <textarea required className=\"candinfo\"  placeholder=\"Add a short description\" name = \"candidate_desc\" \n                            value={this.state.candidate_desc} onChange={this.onChange}  >\n                            </textarea>\n                        </div>\n                    </div>\n                </div>\n                </Modal.Body>\n          \n                <Modal.Footer>\n                <button className=\"rg addcandi\" id=\"rg\" onClick={() => this.handleAddCandidate()}>Add</button>\n                </Modal.Footer>\n                </Modal> \n\n\n\n            <div className=\"container\">\n            <div className= \"header\">\n                        <ul className=\"navbar-nav\" id=\"navg\">\n                            <li className=\"nav-item\">\n                                <a className=\" brand\">Electronic</a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"colorb\">Ballot</a>\n                            </li>\n                            <li className=\"nav-item\">\n                            <button className=\"btnlogout\" type=\"button\"  onClick={() => this.doLogout()} >Logout </button>\n                            </li>\n                        </ul>\n                    </div>\n\n                <section className=\"mycard\">\n                    <header className=\"applicantheader\">\n                    <ul id=\"setcamp\">\n                    <li className=\"nav-item\">\n                        <h3 className=\"camp\" >\n                            Presidential Elections 2020 \n                        </h3>     \n                        <button className=\"btnsettle\" type=\"button\" onClick={() => this.settleElection()} >Settle Election</button>\n                        <button className=\"btn can\" type=\"button\" data-toggle=\"modal\" data-target=\"#addcandidate\" onClick={() => this.showmodel()} >Add Candidate</button>\n                    </li>\n                    </ul>\n                    </header>\n                    <div className=\"columns\">\n                        {loopcandidate}\n                    </div>\n                </section>\n            </div>\n</div>\n\n\n        );\n    }\n}\n\n//Export The Main Component\nexport default CandidateList;"]},"metadata":{},"sourceType":"module"}